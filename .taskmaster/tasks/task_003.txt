# Task ID: 3
# Title: Target Connection Service Implementation
# Status: done
# Dependencies: 1
# Priority: high
# Description: Implement the service that establishes and manages TCP connections to target IP/port destinations.
# Details:
1. Create a TargetConnectionService class to manage TCP connections
2. Implement methods to establish connections to specified IP/port
3. Set up data event handlers for receiving data from target
4. Implement error handling and connection termination logic
5. Add buffering mechanism for data transmission

```javascript
const net = require('net');

class TargetConnectionService {
  constructor() {
    this.connections = new Map();
  }
  
  connect(id, targetIp, targetPort) {
    return new Promise((resolve, reject) => {
      const client = new net.Socket();
      
      client.connect(targetPort, targetIp, () => {
        this.connections.set(id, client);
        resolve(client);
      });
      
      client.on('data', (data) => {
        // Handle data received from target
        // This will be forwarded to the WebSocket client
      });
      
      client.on('close', () => {
        // Handle connection close
        this.connections.delete(id);
      });
      
      client.on('error', (err) => {
        // Handle connection error
        reject(err);
      });
    });
  }
  
  send(id, data) {
    const connection = this.connections.get(id);
    if (connection) {
      return connection.write(data);
    }
    return false;
  }
  
  disconnect(id) {
    const connection = this.connections.get(id);
    if (connection) {
      connection.destroy();
      this.connections.delete(id);
      return true;
    }
    return false;
  }
}

module.exports = new TargetConnectionService();
```

# Test Strategy:
Test TCP connection establishment to mock servers. Verify data transmission in both directions, connection termination, and error handling. Use network mocking tools to simulate various network conditions and failures.
