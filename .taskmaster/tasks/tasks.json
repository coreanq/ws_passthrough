{
  "tasks": [
    {
      "id": 1,
      "title": "Project Setup and Environment Configuration",
      "description": "Initialize the Node.js project with version 22 and set up the basic project structure with necessary dependencies.",
      "details": "1. Initialize a new Node.js project using `npm init`\n2. Configure package.json to specify Node.js v22\n3. Install required dependencies:\n   - ws (for WebSocket server)\n   - net (for TCP connections to target IP/port)\n   - express (for configuration endpoints)\n   - dotenv (for environment variables)\n4. Set up basic project structure:\n   ```\n   /src\n     /config\n     /services\n     /utils\n     /routes\n     server.js\n   /tests\n   .env\n   .gitignore\n   ```\n5. Create basic configuration files for development and production environments",
      "testStrategy": "Verify project structure and dependencies are correctly set up. Ensure Node.js v22 is properly configured and the application can start without errors.",
      "priority": "high",
      "dependencies": [],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 2,
      "title": "WebSocket Server Implementation",
      "description": "Implement the core WebSocket server that listens for incoming connections and handles basic WebSocket protocol operations.",
      "details": "1. Create a WebSocket server using the 'ws' library\n2. Implement connection handling for new WebSocket clients\n3. Set up event listeners for 'message', 'close', and 'error' events\n4. Implement basic message parsing and validation\n5. Create a connection manager to track active WebSocket connections\n\n```javascript\nconst WebSocket = require('ws');\nconst { createServer } = require('http');\n\nconst server = createServer();\nconst wss = new WebSocket.Server({ server });\n\nwss.on('connection', (ws, req) => {\n  // Handle new connection\n  const path = req.url;\n  \n  ws.on('message', (message) => {\n    // Handle incoming messages based on path\n  });\n  \n  ws.on('close', () => {\n    // Handle connection close\n  });\n  \n  ws.on('error', (error) => {\n    // Handle errors\n  });\n});\n\nserver.listen(process.env.PORT || 8080);\n```",
      "testStrategy": "Use WebSocket client libraries to test connection establishment, message sending/receiving, and connection termination. Verify the server correctly handles WebSocket protocol handshakes and events.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 3,
      "title": "Target Connection Service Implementation",
      "description": "Implement the service that establishes and manages TCP connections to target IP/port destinations.",
      "details": "1. Create a TargetConnectionService class to manage TCP connections\n2. Implement methods to establish connections to specified IP/port\n3. Set up data event handlers for receiving data from target\n4. Implement error handling and connection termination logic\n5. Add buffering mechanism for data transmission\n\n```javascript\nconst net = require('net');\n\nclass TargetConnectionService {\n  constructor() {\n    this.connections = new Map();\n  }\n  \n  connect(id, targetIp, targetPort) {\n    return new Promise((resolve, reject) => {\n      const client = new net.Socket();\n      \n      client.connect(targetPort, targetIp, () => {\n        this.connections.set(id, client);\n        resolve(client);\n      });\n      \n      client.on('data', (data) => {\n        // Handle data received from target\n        // This will be forwarded to the WebSocket client\n      });\n      \n      client.on('close', () => {\n        // Handle connection close\n        this.connections.delete(id);\n      });\n      \n      client.on('error', (err) => {\n        // Handle connection error\n        reject(err);\n      });\n    });\n  }\n  \n  send(id, data) {\n    const connection = this.connections.get(id);\n    if (connection) {\n      return connection.write(data);\n    }\n    return false;\n  }\n  \n  disconnect(id) {\n    const connection = this.connections.get(id);\n    if (connection) {\n      connection.destroy();\n      this.connections.delete(id);\n      return true;\n    }\n    return false;\n  }\n}\n\nmodule.exports = new TargetConnectionService();\n```",
      "testStrategy": "Test TCP connection establishment to mock servers. Verify data transmission in both directions, connection termination, and error handling. Use network mocking tools to simulate various network conditions and failures.",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 4,
      "title": "Configuration Endpoint Implementation",
      "description": "Implement the /config WebSocket endpoint to manage target IP and port settings.",
      "details": "1. Create a configuration handler for the '/config' WebSocket path\n2. Implement JSON message parsing for configuration commands\n3. Add validation for IP address and port number inputs\n4. Implement configuration storage mechanism\n5. Add response handling for configuration success/failure\n\n```javascript\n// In the WebSocket connection handler\nif (path === '/config') {\n  ws.on('message', (message) => {\n    try {\n      const config = JSON.parse(message);\n      \n      // Validate config\n      if (!config.targetIp || !config.targetPort) {\n        ws.send(JSON.stringify({\n          status: 'error',\n          message: 'Missing required configuration parameters'\n        }));\n        return;\n      }\n      \n      // Validate IP format and port range\n      if (!isValidIpAddress(config.targetIp) || !isValidPort(config.targetPort)) {\n        ws.send(JSON.stringify({\n          status: 'error',\n          message: 'Invalid IP address or port'\n        }));\n        return;\n      }\n      \n      // Store configuration for this connection\n      const connectionId = generateConnectionId();\n      connectionConfigs.set(connectionId, {\n        targetIp: config.targetIp,\n        targetPort: config.targetPort\n      });\n      \n      ws.connectionId = connectionId;\n      \n      ws.send(JSON.stringify({\n        status: 'success',\n        message: 'Configuration saved',\n        connectionId\n      }));\n    } catch (error) {\n      ws.send(JSON.stringify({\n        status: 'error',\n        message: 'Invalid configuration format'\n      }));\n    }\n  });\n}\n```",
      "testStrategy": "Test configuration message handling with valid and invalid inputs. Verify proper validation of IP addresses and port numbers. Test configuration storage and retrieval. Ensure proper error responses for malformed requests.",
      "priority": "medium",
      "dependencies": [
        2,
        3
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "Data Passthrough Implementation",
      "description": "Implement the /data WebSocket endpoint to handle data passthrough between WebSocket clients and target IP/port.",
      "details": "1. Create a data handler for the '/data' WebSocket path\n2. Implement connection establishment to target IP/port using stored configuration\n3. Set up bidirectional data forwarding between WebSocket and TCP connection\n4. Implement data buffering mechanism to handle high throughput\n5. Add connection tracking and cleanup logic\n\n```javascript\n// In the WebSocket connection handler\nif (path === '/data') {\n  ws.on('message', async (message) => {\n    try {\n      // First message should contain the connectionId from config\n      if (!ws.targetConnection) {\n        const initData = JSON.parse(message);\n        if (!initData.connectionId) {\n          ws.send(JSON.stringify({\n            status: 'error',\n            message: 'Missing connectionId'\n          }));\n          return;\n        }\n        \n        const config = connectionConfigs.get(initData.connectionId);\n        if (!config) {\n          ws.send(JSON.stringify({\n            status: 'error',\n            message: 'Invalid connectionId or configuration not found'\n          }));\n          return;\n        }\n        \n        try {\n          // Establish connection to target\n          const targetConnection = await targetConnectionService.connect(\n            initData.connectionId,\n            config.targetIp,\n            config.targetPort\n          );\n          \n          ws.targetConnection = targetConnection;\n          ws.connectionId = initData.connectionId;\n          \n          // Set up data handler from target to WebSocket\n          targetConnection.on('data', (data) => {\n            if (ws.readyState === WebSocket.OPEN) {\n              ws.send(data);\n            }\n          });\n          \n          ws.send(JSON.stringify({\n            status: 'connected',\n            message: `Connected to ${config.targetIp}:${config.targetPort}`\n          }));\n        } catch (error) {\n          ws.send(JSON.stringify({\n            status: 'error',\n            message: `Failed to connect to target: ${error.message}`\n          }));\n        }\n      } else {\n        // Regular data message, forward to target\n        targetConnectionService.send(ws.connectionId, message);\n      }\n    } catch (error) {\n      ws.send(JSON.stringify({\n        status: 'error',\n        message: `Error processing message: ${error.message}`\n      }));\n    }\n  });\n  \n  ws.on('close', () => {\n    if (ws.connectionId) {\n      targetConnectionService.disconnect(ws.connectionId);\n    }\n  });\n}\n```",
      "testStrategy": "Test data transmission in both directions with various payload sizes. Verify correct handling of connection establishment and termination. Test buffering under high load conditions. Measure latency to ensure minimal delay in data passthrough.",
      "priority": "high",
      "dependencies": [
        2,
        3,
        4
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "Event Notification Implementation",
      "description": "Implement the /event WebSocket endpoint to notify clients about connection events and status changes.",
      "details": "1. Create an event handler for the '/event' WebSocket path\n2. Implement an event emitter system for internal server events\n3. Set up event subscription mechanism for WebSocket clients\n4. Define event types and message formats for different scenarios\n5. Implement event broadcasting to subscribed clients\n\n```javascript\nconst EventEmitter = require('events');\nconst serverEvents = new EventEmitter();\n\n// In the WebSocket connection handler\nif (path === '/event') {\n  // Send initial connection success event\n  ws.send(JSON.stringify({\n    type: 'connection',\n    status: 'established',\n    timestamp: Date.now()\n  }));\n  \n  // Set up event listener for this client\n  const eventHandler = (event) => {\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify(event));\n    }\n  };\n  \n  serverEvents.on('serverEvent', eventHandler);\n  \n  ws.on('message', (message) => {\n    try {\n      const eventRequest = JSON.parse(message);\n      \n      // Handle event subscription requests\n      if (eventRequest.action === 'subscribe') {\n        ws.send(JSON.stringify({\n          type: 'subscription',\n          status: 'success',\n          events: eventRequest.events || 'all'\n        }));\n      }\n    } catch (error) {\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Invalid event request format'\n      }));\n    }\n  });\n  \n  ws.on('close', () => {\n    // Clean up event listener\n    serverEvents.removeListener('serverEvent', eventHandler);\n  });\n}\n\n// Example of emitting an event elsewhere in the code\nserverEvents.emit('serverEvent', {\n  type: 'connection',\n  status: 'disconnected',\n  target: '192.168.1.100:8080',\n  reason: 'Target connection reset',\n  timestamp: Date.now()\n});\n```",
      "testStrategy": "Test event subscription and notification with various event types. Verify events are properly delivered to subscribed clients. Test event delivery under connection stress conditions. Ensure proper cleanup of event listeners when connections close.",
      "priority": "medium",
      "dependencies": [
        2,
        3
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "Connection Management and Error Handling",
      "description": "Implement robust connection management and error handling for both WebSocket and target connections.",
      "details": "1. Create a ConnectionManager class to track and manage all connections\n2. Implement proper error handling for WebSocket and TCP connection failures\n3. Add automatic reconnection logic with configurable retry policies\n4. Implement graceful shutdown procedures\n5. Add connection monitoring and timeout handling\n\n```javascript\nclass ConnectionManager {\n  constructor() {\n    this.wsConnections = new Map();\n    this.targetConnections = new Map();\n    this.connectionPairs = new Map();\n  }\n  \n  registerWebSocketConnection(id, ws, path) {\n    this.wsConnections.set(id, { ws, path, createdAt: Date.now() });\n    return id;\n  }\n  \n  registerTargetConnection(id, socket, targetIp, targetPort) {\n    this.targetConnections.set(id, { socket, targetIp, targetPort, createdAt: Date.now() });\n    return id;\n  }\n  \n  createConnectionPair(wsId, targetId) {\n    this.connectionPairs.set(wsId, targetId);\n    return { wsId, targetId };\n  }\n  \n  handleConnectionError(id, error) {\n    // Log error\n    console.error(`Connection error for ${id}:`, error);\n    \n    // Emit event\n    serverEvents.emit('serverEvent', {\n      type: 'error',\n      connectionId: id,\n      message: error.message,\n      timestamp: Date.now()\n    });\n    \n    // Clean up connections\n    this.cleanupConnection(id);\n  }\n  \n  cleanupConnection(id) {\n    // Clean up WebSocket connection\n    if (this.wsConnections.has(id)) {\n      const wsConn = this.wsConnections.get(id);\n      if (wsConn.ws.readyState === WebSocket.OPEN) {\n        wsConn.ws.close();\n      }\n      this.wsConnections.delete(id);\n    }\n    \n    // Clean up target connection\n    if (this.targetConnections.has(id)) {\n      const targetConn = this.targetConnections.get(id);\n      targetConn.socket.destroy();\n      this.targetConnections.delete(id);\n    }\n    \n    // Clean up connection pair\n    if (this.connectionPairs.has(id)) {\n      const targetId = this.connectionPairs.get(id);\n      this.cleanupConnection(targetId);\n      this.connectionPairs.delete(id);\n    }\n  }\n  \n  getConnectionStats() {\n    return {\n      activeWebSocketConnections: this.wsConnections.size,\n      activeTargetConnections: this.targetConnections.size,\n      activeConnectionPairs: this.connectionPairs.size\n    };\n  }\n}\n```",
      "testStrategy": "Test connection management under various failure scenarios. Verify proper cleanup of resources when connections terminate. Test reconnection logic with simulated network failures. Verify memory usage remains stable during connection churn.",
      "priority": "high",
      "dependencies": [
        2,
        3,
        5,
        6
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "Performance Optimization",
      "description": "Optimize the server for minimal latency and maximum throughput in data passthrough operations.",
      "details": "1. Implement efficient buffering strategies to minimize memory usage\n2. Optimize data handling paths to reduce latency\n3. Add performance monitoring and metrics collection\n4. Implement load testing and benchmarking tools\n5. Optimize connection handling for high concurrency\n\n```javascript\n// Optimized data handling with minimal copying\nconst handleDataPassthrough = (source, destination, buffer) => {\n  // Use Buffer pooling to reduce GC pressure\n  if (!buffer) {\n    buffer = Buffer.allocUnsafe(65536); // 64KB buffer\n  }\n  \n  // Implement backpressure handling\n  const handleBackpressure = () => {\n    source.pause();\n    destination.once('drain', () => {\n      source.resume();\n    });\n  };\n  \n  // Optimize for direct passthrough when possible\n  if (source.readableFlowing && destination.writable) {\n    source.pipe(destination, { end: false });\n    return;\n  }\n  \n  // Manual data handling for more control\n  source.on('data', (chunk) => {\n    // Check if we need to handle backpressure\n    const canContinue = destination.write(chunk);\n    if (!canContinue) {\n      handleBackpressure();\n    }\n  });\n};\n\n// Performance metrics collection\nclass PerformanceMonitor {\n  constructor() {\n    this.metrics = {\n      messagesProcessed: 0,\n      bytesTransferred: 0,\n      avgLatency: 0,\n      peakLatency: 0,\n      connectionCount: 0\n    };\n    \n    this.latencyMeasurements = [];\n    this.startTime = Date.now();\n    \n    // Periodically calculate and reset metrics\n    setInterval(() => this.calculateMetrics(), 60000);\n  }\n  \n  recordMessage(size, latency) {\n    this.metrics.messagesProcessed++;\n    this.metrics.bytesTransferred += size;\n    this.latencyMeasurements.push(latency);\n    \n    if (latency > this.metrics.peakLatency) {\n      this.metrics.peakLatency = latency;\n    }\n  }\n  \n  calculateMetrics() {\n    if (this.latencyMeasurements.length > 0) {\n      const sum = this.latencyMeasurements.reduce((a, b) => a + b, 0);\n      this.metrics.avgLatency = sum / this.latencyMeasurements.length;\n      this.latencyMeasurements = [];\n    }\n    \n    // Log or expose metrics\n    console.log('Performance metrics:', this.metrics);\n    \n    // Reset peak values\n    this.metrics.peakLatency = 0;\n  }\n}\n```",
      "testStrategy": "Conduct load testing with varying message sizes and connection counts. Measure and compare latency before and after optimizations. Profile memory usage and CPU utilization under load. Test with network throttling to simulate various network conditions.",
      "priority": "medium",
      "dependencies": [
        5,
        7
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 9,
      "title": "Logging and Monitoring",
      "description": "Implement comprehensive logging and monitoring to track server performance and troubleshoot issues.",
      "details": "1. Implement structured logging with different log levels\n2. Add request/response logging for debugging\n3. Implement connection lifecycle logging\n4. Add performance metrics logging\n5. Implement log rotation and management\n\n```javascript\nconst winston = require('winston');\n\n// Configure logger\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'websocket-passthrough' },\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' })\n  ]\n});\n\n// Connection lifecycle logging\nconst logConnectionLifecycle = (event, details) => {\n  logger.info('Connection event', {\n    event,\n    ...details,\n    timestamp: new Date().toISOString()\n  });\n};\n\n// Performance logging\nconst logPerformanceMetrics = (metrics) => {\n  logger.info('Performance metrics', {\n    ...metrics,\n    timestamp: new Date().toISOString()\n  });\n};\n\n// Error logging\nconst logError = (error, context) => {\n  logger.error('Error occurred', {\n    error: error.message,\n    stack: error.stack,\n    context,\n    timestamp: new Date().toISOString()\n  });\n};\n\n// Example usage\nwss.on('connection', (ws, req) => {\n  const connectionId = generateConnectionId();\n  logConnectionLifecycle('websocket_connected', {\n    connectionId,\n    remoteAddress: req.socket.remoteAddress,\n    path: req.url\n  });\n  \n  ws.on('close', (code, reason) => {\n    logConnectionLifecycle('websocket_disconnected', {\n      connectionId,\n      code,\n      reason: reason.toString()\n    });\n  });\n});\n```",
      "testStrategy": "Verify log output format and content across different log levels. Test log rotation and retention policies. Verify performance impact of logging is minimal. Test log output under error conditions to ensure all relevant information is captured.",
      "priority": "low",
      "dependencies": [
        7,
        8
      ],
      "status": "done",
      "subtasks": []
    },
    {
      "id": 10,
      "title": "Dummy TCP Echo 서버 및 WebSocket 클라이언트 테스트 환경 구축",
      "description": "간단한 더미 TCP 에코 서버를 구현하여 WebSocket passthrough 서버의 TCP 연결 테스트를 수행하고, test.html 파일을 생성하여 웹 브라우저에서 WebSocket 서버에 접속하고 데이터를 송수신하며 서버 이벤트를 확인할 수 있도록 합니다.",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "details": "1. Node.js로 간단한 TCP 에코 서버 (dummyTcpEchoServer.js)를 구현합니다. 이 서버는 수신한 데이터를 그대로 클라이언트에게 다시 보냅니다.\n   * 실행 시 포트 번호를 설정할 수 있도록 구현합니다. 예를 들어, 명령줄 인수를 통해 포트를 지정할 수 있도록 합니다. (예: `node dummyTcpEchoServer.js 3000`)\n2. test.html 파일을 생성합니다. 이 HTML 파일은 다음 기능을 포함해야 합니다:\n    * WebSocket 서버(ws://localhost:8080)에 연결하는 JavaScript 코드.\n    * 연결 상태를 표시하는 UI.\n    * 메시지를 입력하고 서버로 전송할 수 있는 입력 필드 및 버튼.\n    * 서버로부터 수신한 메시지를 표시하는 영역.\n    * /event 엔드포인트를 통해 수신한 서버 이벤트를 표시하는 영역.\n    * /config 엔드포인트를 통해 대상 IP와 포트를 설정할 수 있는 UI (예: 입력 필드 및 버튼).\n3. 테스트 절차를 문서화합니다. (예: dummyTcpEchoServer.js 실행 시 포트 지정 방법, test.html 브라우저에서 열기, 메시지 송수신 테스트, 이벤트 확인).",
      "testStrategy": "",
      "subtasks": []
    }
  ]
}