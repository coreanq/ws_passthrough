# Task ID: 6
# Title: Event Notification Implementation
# Status: done
# Dependencies: 2, 3
# Priority: medium
# Description: Implement the /event WebSocket endpoint to notify clients about connection events and status changes.
# Details:
1. Create an event handler for the '/event' WebSocket path
2. Implement an event emitter system for internal server events
3. Set up event subscription mechanism for WebSocket clients
4. Define event types and message formats for different scenarios
5. Implement event broadcasting to subscribed clients

```javascript
const EventEmitter = require('events');
const serverEvents = new EventEmitter();

// In the WebSocket connection handler
if (path === '/event') {
  // Send initial connection success event
  ws.send(JSON.stringify({
    type: 'connection',
    status: 'established',
    timestamp: Date.now()
  }));
  
  // Set up event listener for this client
  const eventHandler = (event) => {
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(JSON.stringify(event));
    }
  };
  
  serverEvents.on('serverEvent', eventHandler);
  
  ws.on('message', (message) => {
    try {
      const eventRequest = JSON.parse(message);
      
      // Handle event subscription requests
      if (eventRequest.action === 'subscribe') {
        ws.send(JSON.stringify({
          type: 'subscription',
          status: 'success',
          events: eventRequest.events || 'all'
        }));
      }
    } catch (error) {
      ws.send(JSON.stringify({
        type: 'error',
        message: 'Invalid event request format'
      }));
    }
  });
  
  ws.on('close', () => {
    // Clean up event listener
    serverEvents.removeListener('serverEvent', eventHandler);
  });
}

// Example of emitting an event elsewhere in the code
serverEvents.emit('serverEvent', {
  type: 'connection',
  status: 'disconnected',
  target: '192.168.1.100:8080',
  reason: 'Target connection reset',
  timestamp: Date.now()
});
```

# Test Strategy:
Test event subscription and notification with various event types. Verify events are properly delivered to subscribed clients. Test event delivery under connection stress conditions. Ensure proper cleanup of event listeners when connections close.
