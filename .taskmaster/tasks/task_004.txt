# Task ID: 4
# Title: Configuration Endpoint Implementation
# Status: done
# Dependencies: 2, 3
# Priority: medium
# Description: Implement the /config WebSocket endpoint to manage target IP and port settings.
# Details:
1. Create a configuration handler for the '/config' WebSocket path
2. Implement JSON message parsing for configuration commands
3. Add validation for IP address and port number inputs
4. Implement configuration storage mechanism
5. Add response handling for configuration success/failure

```javascript
// In the WebSocket connection handler
if (path === '/config') {
  ws.on('message', (message) => {
    try {
      const config = JSON.parse(message);
      
      // Validate config
      if (!config.targetIp || !config.targetPort) {
        ws.send(JSON.stringify({
          status: 'error',
          message: 'Missing required configuration parameters'
        }));
        return;
      }
      
      // Validate IP format and port range
      if (!isValidIpAddress(config.targetIp) || !isValidPort(config.targetPort)) {
        ws.send(JSON.stringify({
          status: 'error',
          message: 'Invalid IP address or port'
        }));
        return;
      }
      
      // Store configuration for this connection
      const connectionId = generateConnectionId();
      connectionConfigs.set(connectionId, {
        targetIp: config.targetIp,
        targetPort: config.targetPort
      });
      
      ws.connectionId = connectionId;
      
      ws.send(JSON.stringify({
        status: 'success',
        message: 'Configuration saved',
        connectionId
      }));
    } catch (error) {
      ws.send(JSON.stringify({
        status: 'error',
        message: 'Invalid configuration format'
      }));
    }
  });
}
```

# Test Strategy:
Test configuration message handling with valid and invalid inputs. Verify proper validation of IP addresses and port numbers. Test configuration storage and retrieval. Ensure proper error responses for malformed requests.
