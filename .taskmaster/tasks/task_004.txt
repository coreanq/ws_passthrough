# Task ID: 4
# Title: Implement Target Connection Service
# Status: pending
# Dependencies: 2, 3
# Priority: high
# Description: Create a service to establish and manage connections to target IP addresses based on configuration.
# Details:
1. Create a TargetConnectionService to manage connections to target IPs:
   ```javascript
   const net = require('net');
   
   class TargetConnectionService {
     constructor(configService, eventEmitter) {
       this.configService = configService;
       this.eventEmitter = eventEmitter;
       this.connections = new Map();
       
       // Listen for config changes
       this.configService.addChangeListener(this.handleConfigChange.bind(this));
     }
     
     createConnection(clientId) {
       const config = this.configService.getConfig();
       const socket = new net.Socket();
       
       socket.connect(config.targetPort, config.targetIp, () => {
         this.eventEmitter.emit('targetConnected', { clientId });
       });
       
       socket.on('data', (data) => {
         this.eventEmitter.emit('targetData', { clientId, data });
       });
       
       socket.on('close', () => {
         this.eventEmitter.emit('targetDisconnected', { clientId });
       });
       
       socket.on('error', (error) => {
         this.eventEmitter.emit('targetError', { clientId, error: error.message });
       });
       
       this.connections.set(clientId, socket);
       return socket;
     }
     
     sendData(clientId, data) {
       const socket = this.connections.get(clientId);
       if (socket && socket.writable) {
         return socket.write(data);
       }
       return false;
     }
     
     closeConnection(clientId) {
       const socket = this.connections.get(clientId);
       if (socket) {
         socket.destroy();
         this.connections.delete(clientId);
       }
     }
     
     handleConfigChange(newConfig) {
       // Reconnect all existing connections with new config
       for (const [clientId, socket] of this.connections.entries()) {
         socket.destroy();
         this.createConnection(clientId);
       }
     }
   }
   ```
2. Implement connection pooling and management
3. Add reconnection logic with exponential backoff

# Test Strategy:
Unit test the TargetConnectionService to verify it correctly establishes connections to target IPs. Test reconnection logic and error handling. Mock the socket connections to simulate various network conditions and verify proper behavior.
